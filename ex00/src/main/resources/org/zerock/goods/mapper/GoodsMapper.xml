<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.zerock.goods.mapper.GoodsMapper">

	<!-- 상품 리스트 -->
	<select id="list" resultType="org.zerock.goods.vo.GoodsVO">
		select
			goods_no, goods_name,
			price, discount, discount_rate, hit, saved_rate,
			image_name , sale_price
		from (
			select
				rownum rnum, goods_no, goods_name,
				price, discount, discount_rate, hit, saved_rate,
				image_name , sale_price
			from (
				select
					 g.goods_no, g.goods_name,
					 p.price, p.discount, p.discount_rate, g.hit, p.saved_rate,
					 g.image_name , p.sale_price
				from
					goods g, price p
				where
					(<!-- 일반 조건. -->
						<!-- 현재 판매되고 있는 물건 - 가격 정보가 현재 가격으로 존재한다. -->
						(
							<![CDATA[
							sale_startDate <= sysdate
							and trunc(sysdate) <= sale_endDate
							]]>
						)
						<!-- 검색을 달아야 한다. -->
						<include refid="search" />
					)
					
					and
					(<!-- JOIN 조건. -->
						g.goods_no = p.goods_no
					)
					
				order by goods_no desc
			)
		)
		where rnum between #{pageObject.startRow} and #{pageObject.endRow}
	</select>

	<!-- 상품 리스트 페이지 처리를 위한 전체 데이터 개수 가져오기 -->
	<select id="getTotalRow" resultType="Long">
		select count(*)
		from goods g , price p
		<!-- 검색을 달아야한다. -->
		where (1=1)
		<include refid="search" />
		and 
			g.goods_no = p.goods_no
	</select>
	
	<!-- 상품 리스트의 검색 처리 -->
	<sql id="search">
		<!-- 검색 데이터가 존재하면 쿼리를 추가 시킨다. -->
		<if test="searchVO.isExist">
		and (
		<!--  prefixOverrides="or" - 맨 앞에 or는 제거한다. -->
			<trim prefixOverrides="and">
				<!-- 대분류 검색 추가  -->
				<if test="searchVO.cate_code1 > 0 and searchVO.cate_code1 != null">
					and cate_code1  = #{searchVO.cate_code1}
				</if>
				<!-- 중분류 검색 추가  -->
				<if test="searchVO.cate_code2 > 0 and searchVO.cate_code2 != null ">
					and cate_code2 = #{searchVO.cate_code2}
				</if>
				<!-- 상품명 검색 추가  -->
				<if test="searchVO.goods_name != null and searchVO.goods_name != ''.toString() ">
					and goods_name like '%' || #{searchVO.goods_name} || '%'
				</if>
				<!-- 최저가 검색 추가  -->
				<if test=" searchVO.min > 0  and searchVO.min != null">
					and sale_price >= #{searchVO.min}
				</if>
				<!-- 최고가 검색 추가  -->
				<if test="searchVO.max != null and searchVO.max > 0">
					<![CDATA[
						and sale_price <= #{searchVO.max}
					 ]]>
				</if>
			</trim>
			)
		</if>
	</sql>

	<!-- 상품 보기 조회수 1 증가 -->
	<!-- # {obj} 1. 변수의 이름, 2. vo의 getter 이름, 3. Map의 key -->
	<update id="increase">
		update goods set hit = hit + 1
		where goods_no = #{goods_no}
	</update>

	<!-- 상품정보 보기 -->
	<select id="view" resultType="org.zerock.goods.vo.GoodsVO">
		select 
		g.goods_no, g.cate_code1,g.cate_code2,g.goods_name,g.company,g.product_date,g.content,
		g.image_name, g.detail_image_name,p.price,p.discount,p.discount_rate,
		p.sale_price , p.delivery_charge,
		g.hit,p.saved_rate
		<!-- from 뒤에 사용 할수 있는 것 : 1.테이블 2. select 쿼리 3.view table -->
		from goods g, price p
		where (g.goods_no = #{goods_no}) and (g.goods_no = p.goods_no)
	</select>
	
	<!-- 이미지리스트 -->
	<select id="imageList" resultType="org.zerock.goods.vo.GoodsImageVO">
		select 
		goods_no,image_no,image_name
		<!-- from 뒤에 사용 할수 있는 것 : 1.테이블 2. select 쿼리 3.view table -->
		from goods_image
		where goods_no = #{goods_no}
	</select>
	
	<!-- 사이즈 색상 리스트  -->
	<select id="sizeColorList" resultType="org.zerock.goods.vo.GoodsSizeColorVO">
		select 
		g.goods_no,g.color_no,g.goods_sizeColor_no,g.size_no , c.color_name , s.size_name
		<!-- from 뒤에 사용 할수 있는 것 : 1.테이블 2. select 쿼리 3.view table -->
		from goods_sizeColor g, basic_size s, basic_color c 
		where (g.goods_no = #{goods_no}) and ( g.size_no=s.size_no and g.color_no=c.color_no(+))
	</select>
	
	<!-- 옵션 리스트  -->
	<select id="optionList" resultType="org.zerock.goods.vo.GoodsOptionVO">
		select 
		goods_no,goods_option_no,option_name
		<!-- from 뒤에 사용 할수 있는 것 : 1.테이블 2. select 쿼리 3.view table -->
		from goods_option
		where goods_no = #{goods_no}
	</select>

	



	<!-- 1. 상품 정보 등록 -->
	<insert id="write">
		<!-- 먼저 GoodsVO의 no에 setter를 이용해서 시퀀스에서 받아온 번호를 세팅해 준다. -->
		<selectKey keyProperty="goods_no" resultType="Long" order="BEFORE">
			select goods_seq.nextval from dual
		</selectKey>
		insert into goods(goods_no,cate_code1,cate_code2,goods_name,company,product_date,image_name,detail_image_name,content)
		
		values(#{goods_no},#{cate_code1},#{cate_code2},#{goods_name},#{company},#{product_date},#{image_name},
		#{detail_image_name,jdbcType=CHAR},#{content})
	</insert>

	<!--  지원되는 JDBC 타입 
		VARCAHR : 문자열 , INTEGER : 정수 , BIGINT : 큰정수
		BOUBLE : 실수 , DATE : 날짜 , TIMESTAMP : 타임스탬프
		BOOLEAN : 논리형
	 -->

	<!-- 2. 상품 추가 이미지 등록 -->
	<insert id="writeImage" parameterType="java.util.List">
		insert into goods_image(image_no,goods_no,image_name)
		select goods_image_seq.nextval,goods_no,image_name
        	from(
        	<foreach collection="list" item="vo" separator=" union all ">
                 select #{vo.goods_no} goods_no,#{vo.image_name} image_name from dual
              </foreach>
       		 )  
    </insert>


	<!-- 3. 상품 사이즈 / 색상 등록 -->
	<insert id="writeSizeColor">
	     insert into goods_sizecolor(goods_sizecolor_no,goods_no,size_no,color_no)
	     select goods_sizecolor_seq.nextval,goods_no,size_no,color_no
        	from(
              <foreach collection="list" item="vo" separator=" union all ">
              <!--  지원되는 JDBC 타입 
				VARCAHR : 문자열 , INTEGER : 정수 , BIGINT : 큰정수
				BOUBLE : 실수 , DATE : 날짜 , TIMESTAMP : 타임스탬프
				BOOLEAN : 논리형
			 -->
                 select #{vo.size_no} size_no,#{vo.goods_no} goods_no,#{vo.color_no, jdbcType=BIGINT} color_no from dual
              </foreach>
       		 )   
    </insert>
    
    
	<!-- 4. 상품 옵션 정보 등록 -->
	<insert id="writeOption">
	     insert into goods_option(goods_option_no,goods_no,option_name)
	     select goods_option_seq.nextval,goods_no,option_name
        	from(
              <foreach collection="list" item="vo" separator=" union all ">
                 select #{vo.option_name} option_name , #{vo.goods_no} goods_no from dual
              </foreach>
       		 )   
    </insert>
    
    
	<!-- 5. 상품 가격 등록 -->
	<insert id="writePrice">
		<!-- 먼저 GoodsVO의 goods_no를 가져와서 세팅해 준다. -->
		insert into price(price_no,goods_no,price,discount,discount_rate,sale_price,
					delivery_charge,saved_rate
						<if test="sale_startDate != null">
							,sale_startdate
						</if>
						<if test="sale_endDate != null">
							,sale_enddate
						</if>
					) 
		VALUES (price_seq.nextval,#{goods_no},#{price},
			<!--  지원되는 JDBC 타입 
				VARCAHR : 문자열 , INTEGER : 정수 , BIGINT : 큰정수
				BOUBLE : 실수 , DATE : 날짜 , TIMESTAMP : 타임스탬프
				BOOLEAN : 논리형
			 -->
		#{discount , jdbcType=BIGINT},
		#{discount_rate , jdbcType=INTEGER},
		#{sale_price , jdbcType=INTEGER }
		#{delivery_charge},#{saved_rate}
		<if test="sale_startDate != null">
		,#{sale_startDate,jdbcType=DATE}
		</if>
		<if test="sale_endDate != null">
		,#{sale_endDate,jdbcType=DATE})
		</if>
	</insert>

	<!-- 상품 수정 -->
	<update id="update">
	<![CDATA[
		update goods
		set title = #{title}, content = #{content}, writer = #{writer}
		where no = ${no} and pw = #{pw}
	]]>
	</update>

	<!-- 상품 수정 -->
	<delete id="delete">
	<![CDATA[
		delete from goods
		where no = ${no} and pw = #{pw}
	]]>
	</delete>
	
	<!-- 사이즈 가져오기 -->
	<select id="getSize" resultType="org.zerock.goods.vo.SizeVO">
		select size_no, cate_code1, cate_code2, size_name
		from basic_size
		where cate_code1 = #{cate_code1}
	</select>
	<!-- 컬러 가져오기 -->
	<select id="getColor" resultType="org.zerock.goods.vo.ColorVO">
		select color_no, cate_code1, cate_code2, color_name
		from basic_color
		where cate_code1 = #{cate_code1}
	</select>
	
</mapper>